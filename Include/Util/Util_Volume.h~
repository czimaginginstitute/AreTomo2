#pragma once
#include <sys/types.h>

class Util_Volume
{
public:
	
	Util_Volume(void);

	~Util_Volume(void);

	void SetSize(int iSizeX, int iSizeY, int iSizeZ);

	void SetSliceZ(float* pfData, int iZ);

	//----------------------------------------
	// When bCopy is false, caller should not
	// free the returned memory.
	//----------------------------------------
	float* GetSliceZ(int iSlicez, bool bCopy);

	void GetSliceZ(float* pfData, int iZ);

	void SetSliceY(float* pfData, int iY);

	void GetSliceY(float* pfData, int iY);

	//--------------------------------------------------
	// Caller should free the returned memory.
	//--------------------------------------------------
	Util_Volume* GetSubVolumeX(int iStartX, int iSizeX);

	void SetSubVolumeX(Util_Volume* pVol, int iStartX);

	//-------------------------------------------------
	// Caller should free the returned memory.
	//-------------------------------------------------
	Util_Volume* GetSubVolumeY(int iStartY, int iSizeY);

	void SetSubVolumeY(Util_Volume* pVol, int iStartY);

	size_t GetVolxels(void);

	void DeleteVolume(void);

	void SetZero(void);

	void Copy(Util_Volume* pVolume);

	//-------------------------
	// Caller free the memory.
	//-------------------------
	Util_Volume* GetCopy(void);

	int m_iSize[3];

	float* m_pfData;

private:

	void mFree(void);

	void mAllocate(void);
};
